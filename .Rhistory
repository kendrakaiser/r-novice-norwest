maxStor<-matrix(data= NA, nrow=196, ncol=21)
reps = seq(1, length(LHSrun), 21) #this is whats breaking it
count=0
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,j]<- LHSrun[[reps[j]+count]][,5]
wy_stor[[i]][,j]<- LHSrun[[reps[j]+count]][,3]
}
count=count+1
maxStor[,i]<- LHSrun[[i]][,1]
}
out<-list(wy_Q, wy_stor, maxStor)
names(out)<-(c("Q", "stor", "maxStor"))
return(out)
}
#----------------------------------------------------------------------------
#calculates the number of days model exceeded max storage or discharge limits
# and total wy volume of exceedance
#----------------------------------------------------------------------------
exceeds <- function(cleanedData){
modEval<-lapply(1:21, matrix, data= NA, nrow=n, ncol=4)
for (i in 1:21){
for (j in 1:n){
Q<-cleanedData$Q[[i]][,j]
S<-cleanedData$stor[[i]][,j]
maxS<-cleanedData$maxStor[,i]
colnames(modEval[[i]])<-c('DaysStor', 'VolStor', 'DaysQlim', 'VolQlim')
daysSover<- which(S > maxS)
Sover=length(daysSover)
modEval[[i]][j,'DaysStor']<-Sover
if(Sover>0){
modEval[[i]][j,'VolStor']<-sum(S[daysSover]-maxS[daysSover])
} else{modEval[[i]][j,'VolStor']<-0}
daysQover <- which(Q >qlim[1:196,2])
Qover<-length(daysQover)
modEval[[i]][j,'DaysQlim']<-Qover
if (Qover>0){
modEval[[i]][j,'VolQlim']<-sum(Q[daysQover]-qlim[daysQover,2])
} else{modEval[[i]][j,'VolQlim']<-0}
}
}
return(modEval)
}
#create hypercubes with different parameter sets
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
outB<-modelRun(bothLHS$data)
n=100
#define probability function - discrete uniform density function for integer parameters
qdunif<-function(p, min, max){
floor(qunif(p, min, max))}
#wrap model
modelRun<-function(params){
return(mapply(outflowStor, params[,1], params[,2]))
}
#----------------------------------------------------------------------------
# Re-organize output for analysis - all runs for each wy in one matrix
#----------------------------------------------------------------------------
cleanData<-function(LHSrun){
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
wy_stor<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
maxStor<-matrix(data= NA, nrow=196, ncol=21)
reps = seq(1, length(LHSrun), 21) #this is whats breaking it
count=0
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,j]<- LHSrun[[reps[j]+count]][,5]
wy_stor[[i]][,j]<- LHSrun[[reps[j]+count]][,3]
}
count=count+1
maxStor[,i]<- LHSrun[[i]][,1]
}
out<-list(wy_Q, wy_stor, maxStor)
names(out)<-(c("Q", "stor", "maxStor"))
return(out)
}
#----------------------------------------------------------------------------
#calculates the number of days model exceeded max storage or discharge limits
# and total wy volume of exceedance
#----------------------------------------------------------------------------
exceeds <- function(cleanedData){
modEval<-lapply(1:21, matrix, data= NA, nrow=n, ncol=4)
for (i in 1:21){
for (j in 1:n){
Q<-cleanedData$Q[[i]][,j]
S<-cleanedData$stor[[i]][,j]
maxS<-cleanedData$maxStor[,i]
colnames(modEval[[i]])<-c('DaysStor', 'VolStor', 'DaysQlim', 'VolQlim')
daysSover<- which(S > maxS)
Sover=length(daysSover)
modEval[[i]][j,'DaysStor']<-Sover
if(Sover>0){
modEval[[i]][j,'VolStor']<-sum(S[daysSover]-maxS[daysSover])
} else{modEval[[i]][j,'VolStor']<-0}
daysQover <- which(Q >qlim[1:196,2])
Qover<-length(daysQover)
modEval[[i]][j,'DaysQlim']<-Qover
if (Qover>0){
modEval[[i]][j,'VolQlim']<-sum(Q[daysQover]-qlim[daysQover,2])
} else{modEval[[i]][j,'VolQlim']<-0}
}
}
return(modEval)
}
#create hypercubes with different parameter sets
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
outB<-modelRun(bothLHS$data)
both<-cleanData(outB)
modEval<-exceeds(both)
#----------------------------------------------------------------------------
#plot
## add ability to plot this for all years on one figure with equal scales -- then subset by below, average, or above average
wy=1
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex()
library(parallel)
#create hypercubes with different parameter sets
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
new.cluster <- parallel::makePSOCKcluster(c("localhost", "localhost"))
clusterLHS <- LHS(model=modelRun(bothLHS$data), factors, N=5000, cl = new.cluster)
View(clusterLHS)
new.cluster <- parallel::makePSOCKcluster(c("localhost", "localhost"))
clusterLHS <- LHS(model=modelRun(bothLHS$data), factors, N=100, cl = new.cluster)
outB<-modelRun(bothLHS$data)
new.cluster <- parallel::makePSOCKcluster(c("localhost", "localhost"))
clusterLHS <- LHS(model=modelRun(bothLHS$data), factors, N=50, cl = new.cluster)
clusterLHS <- LHS(modelRun(bothLHS$data), factors, N=50, cl = new.cluster)
Sys.time()
maxDays=28
q.arg<- list(list("min"=1, "max"=maxDays), list("min"=1, "max"=maxDays))
names(q.arg)<-c("s", "m")
factors<-c("s", "m")
n=5000
#define probability function - discrete uniform density function for integer parameters
qdunif<-function(p, min, max){
floor(qunif(p, min, max))}
#wrap model
modelRun<-function(params){
return(mapply(outflowStor, params[,1], params[,2]))
}
#----------------------------------------------------------------------------
# Re-organize output for analysis - all runs for each wy in one matrix
#----------------------------------------------------------------------------
cleanData<-function(LHSrun){
wy_Q<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
wy_stor<-lapply(1:21, matrix, data= NA, nrow=196, ncol=n)
maxStor<-matrix(data= NA, nrow=196, ncol=21)
reps = seq(1, length(LHSrun), 21) #this is whats breaking it
count=0
for (i in 1:21){
for (j in 1:n){
wy_Q[[i]][,j]<- LHSrun[[reps[j]+count]][,5]
wy_stor[[i]][,j]<- LHSrun[[reps[j]+count]][,3]
}
count=count+1
maxStor[,i]<- LHSrun[[i]][,1]
}
out<-list(wy_Q, wy_stor, maxStor)
names(out)<-(c("Q", "stor", "maxStor"))
return(out)
}
#----------------------------------------------------------------------------
#calculates the number of days model exceeded max storage or discharge limits
# and total wy volume of exceedance
#----------------------------------------------------------------------------
exceeds <- function(cleanedData){
modEval<-lapply(1:21, matrix, data= NA, nrow=n, ncol=4)
for (i in 1:21){
for (j in 1:n){
Q<-cleanedData$Q[[i]][,j]
S<-cleanedData$stor[[i]][,j]
maxS<-cleanedData$maxStor[,i]
colnames(modEval[[i]])<-c('DaysStor', 'VolStor', 'DaysQlim', 'VolQlim')
daysSover<- which(S > maxS)
Sover=length(daysSover)
modEval[[i]][j,'DaysStor']<-Sover
if(Sover>0){
modEval[[i]][j,'VolStor']<-sum(S[daysSover]-maxS[daysSover])
} else{modEval[[i]][j,'VolStor']<-0}
daysQover <- which(Q >qlim[1:196,2])
Qover<-length(daysQover)
modEval[[i]][j,'DaysQlim']<-Qover
if (Qover>0){
modEval[[i]][j,'VolQlim']<-sum(Q[daysQover]-qlim[daysQover,2])
} else{modEval[[i]][j,'VolQlim']<-0}
}
}
return(modEval)
}
#create hypercubes with different parameter sets
bothLHS <-LHS(model = NULL, factors, N=n, q='qdunif', q.arg, nboot=1)
#new.cluster <- parallel::makePSOCKcluster(c("localhost", "localhost"))
#clusterLHS <- LHS(modelRun(bothLHS$data), factors, N=50, cl = new.cluster)
#stopCluster(new.cluster)
outB<-modelRun(bothLHS$data)
Sys.time()
both<-cleanData(outB)
modEval<-exceeds(both)
#----------------------------------------------------------------------------
#plot
## add ability to plot this for all years on one figure with equal scales -- then subset by below, average, or above average
wy=1
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex()
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gq$widths)
grid.newpage()
grid.draw(gg)
library(ggplot2)
plotBubbles(wy)
library(grid)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gq$widths)
grid.newpage()
grid.draw(gg)
plotBubbles<- function(wy){
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex()
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gq$widths)
grid.newpage()
grid.draw(gg)
}
for (wy in 1:21){
plotBubbles(wy)
}
plotBubbles<- function(wy){
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex()
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gv$widths)
grid.newpage()
grid.draw(gg)
}
for (wy in 1:21){
plotBubbles(wy)
}
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, nrow=1)
library(gridExtra)
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, nrow=1)
grid.arrange(g1, g2, g3, nrow =1)
grid.arrange(g1, g3, g4, nrow =1)
grid.arrange(g1, g3, g9, nrow =1)
save.image("~/Documents/GitRepos/ReservoirModeling/Data/ResModLHS5000run.RData")
save.image("~/Documents/GitRepos/ReservoirModeling/ResModOutput.RData")
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=20)
load("~/Documents/GitRepos/ReservoirModeling/Data/ResModLHS5000run.RData")
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=20)
library(pse)
library(DescTools)
library(ggplot2)
library(hexbin)
library(parallel)
library(grid)
library(gridExtra)
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=20)
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=15)
plotBubbles<- function(wy){
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=15)
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")+
scale_size_continuous(range = c(0, 100))
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")+
scale_size_continuous(range = c(0, 5000000))
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gv$widths)
grid.newpage()
grid.draw(gg)
}
for (wy in 1:21){
plotBubbles(wy)
}
plotBubbles<- function(wy){
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=15)
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4", range = c(0, 200000))+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")+
scale_size_continuous(range = c(0, 100))
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3", range = c(0, 5000000))+
scale_size_continuous(range = c(0, 60))
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gv$widths)
grid.newpage()
grid.draw(gg)
}
for (wy in 1:21){
plotBubbles(wy)
}
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, nrow=1)
View(g1)
g1
View(g1)
grid.arrange(g1, g2, nrow=1)
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
#----------------------------------------------------------------------------
#plot
## add ability to plot this for all years on one figure with equal scales -- then subset by below, average, or above average
wy=1
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4", range = c(0, 200000))+
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")+
scale_size_continuous(range = c(0, 100))
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3", range = c(0, 5000000))+
scale_size_continuous(range = c(0, 60))
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+ #, range = c(0, 200000)
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")+
scale_size_continuous(range = c(0, 100))
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")+ #, range = c(0, 5000000)
scale_size_continuous(range = c(0, 60))
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gv$widths)
grid.newpage()
grid.draw(gg)
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
View(wydata)
max(wydata$DaysStor)
max(wydata$DaysQlim)
View(modEval)
zz<-modEval[[1]]
View(zz)
yy<-modEval[[wy]][DaysStor]
yy<-modEval[[wy]]['DaysStor']
yy<-modEval[[wy]]$DaysStor
wydat<-modEval[[wy]]
View(wydat)
maxLimDays <- matrix(data=NA, nrow=21, ncol=2)
for (wy in 1:21){
wydat<-modEval[[wy]]
maxLimDays[wy, 1] <-max(wydat$DaysStor)
maxLimDays[wy, 2] <-max(wydat$DaysQlim)
}
maxLimDays <- matrix(data=NA, nrow=21, ncol=2)
for (wy in 1:21){
wydat<-modEval[[wy]]
maxLimDays[wy, 1] <-max(wydat[,1]) #DaysStor
maxLimDays[wy, 2] <-max(wydat[,3]) #DaysQlim
}
View(maxLimDays)
plotBubbles<- function(wy){
wydata <- as.data.frame(cbind(modEval[[wy]], bothLHS$data))
d <- ggplot(data=wydata, aes(x=s, y=m))
d + geom_hex(bins=15)
s<- ggplot(wydata, aes(x=s, y=m, size = DaysStor, fill = VolStor)) +
geom_point(shape=21)+
scale_fill_continuous(low = "plum1", high = "purple4")+ #, range = c(0, 200000)
labs(size = "Days over Storage Limits", fill = "Volume Over Storage Limits")+
#scale_size_continuous(range = c(0, 100))
lims(size = c(0,100))
v<- ggplot(wydata, aes(x=s, y=m, size = DaysQlim, fill = VolQlim)) +
geom_point(shape=21)+
labs(size = "Days over Q Limits", fill = "Volume Over Q Limits")+
scale_fill_continuous(low = "lightpink1", high = "red3")+ #, range = c(0, 5000000)
#scale_size_continuous(range = c(0, 60))
lims(size = c(0,60))
gs<-ggplotGrob(s)
gv<-ggplotGrob(v)
nam<-paste("g",wy, sep="")
assign(nam, rbind(gs, gv, size = "first"), envir = .GlobalEnv)
gg<-get(nam)
gg$widths <- unit.pmax(gs$widths, gv$widths)
grid.newpage()
grid.draw(gg)
}
for (wy in 1:21){
plotBubbles(wy)
}
grid.arrange(g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, nrow=1)
grid.arrange(g1, g2, nrow=1)
grid.arrange(g1, g2, g3, g4, g5, nrow=1)
setwd("~/Documents/GitRepos/r-novice-norwest")
temps <- read.csv(file = "data/stream-temps.csv", stringsAsFactors=FALSE)
View(temps)
View(temps)
str(temps$MonthlyMax)
str(temps$NoRWeST_ID)
View(temps)
temps_raw <- read.csv(file="data/stream-temps-raw.csv")
View(temps_raw)
View(temps)
View(temps)
temps <- read.csv(file = "data/stream-temps.csv", stringsAsFactors=TRUE)
temps
str(temps$NoRWeST_ID)
reaches <- c('MidSnake_1', 'MidSnake_2', 'MidSnake_3', 'MidSnake_4')
reaches
str(reaches)
reaches <- c('MidSnake_1', 'MidSnake_2', 'MidSnake_1', 'MidSnake_3', 'MidSnake_2')
reaches
str(reaches)
reach_factors<- factor(reaches)
class(reach_factors)
str(Creach_factors)
str(reach_factors)
typeof(reach_factors)
typeof(reaches)
>str(temps$MonthYear)
str(temps$MonthYear)
temps <- read.csv(file="data/stream-temps.csv", colClasses=c(NA, NA, "character"))
str(temps$MonthYear)
?read.csv
plot(temps$MonthlyMax)
x <- c(5.4, 6.2, 7.1, 4.8, 7.5)
names(x) <- c('a', 'b', 'c', 'd', 'e')
x
x[1]
x[4]
x[c(1, 3)]
x[1:4]
x[c(1,1,3)]
x[6]
x[0]
x[-2]
x[c(-1, -5)]  # or x[-c(1,5)]
View(temps)
temps$NoRWeST_ID == 'MidSnake_1'
unique(temps$NoRWeST_ID)
plot(temps$NoRWeST_ID == 'MidSnake_1')
plot(temps$MonthlyMean(temps$NoRWeST_ID == 'MidSnake_1'))
plot(temps$MonthlyMean[temps$NoRWeST_ID == 'MidSnake_5'])
knitr::opts_chunk$set(echo = TRUE)
plot(temps$MonthlyMean[temps$NoRWeST_ID == 'MidSnake_174'])
plot(temps$MonthlyMean[temps$NoRWeST_ID == 'MidSnake_174'])
plot(temps$MonthYear[temps$NoRWeST_ID == 'MidSnake_174'], temps$MonthlyMean[temps$NoRWeST_ID == 'MidSnake_174'])
temps$MonthYear[temps$NoRWeST_ID == 'MidSnake_174']
class(temps$MonthYear)
dates <- as.Date(temps$MonthYear[temps$NoRWeST_ID == 'MidSnake_174'], %m-%y)
dates <- as.Date(temps$MonthYear[temps$NoRWeST_ID == 'MidSnake_174'], %m-%Y)
dates <- as.Date(temps$MonthYear, %m-%Y)
dates <- as.Date(temps$MonthYear, "%m-%Y")
dates <- as.Date(temps$MonthYear[1], "%m-%Y")
